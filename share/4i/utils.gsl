.template 0

function log(msg, ctx)
  if defined(my.ctx)
    echo "[$(global.logcnt:)][$(my.ctx:)] $(my.msg:)"
  else
    echo "[$(global.logcnt:)] $(my.msg:)"
  endif
endfunction

function debug(msg, ctx)
  if !global.debug
    return
  endif
  if defined(my.ctx)
    echo "[$(global.logcnt:)][$(my.ctx:)][debug] $(my.msg:)"
  else
    echo "[$(global.logcnt:)][debug] $(my.msg:)"
  endif
endfunction

function error(msg, ctx)
  if defined(my.ctx)
    abort "[$(global.logcnt:)][$(my.ctx:)][error] $(my.msg:)"
  else
    abort "[$(global.logcnt:)][error] $(my.msg:)"
  endif
endfunction

# exec a command and redirects the output as a function return value
function exec(cmd)
  debug('exec "$(my.cmd:)"')
  my.outname = "/tmp/gslcmd_$(string.hash(my.cmd)).out"
  my.errname = "/tmp/gslcmd_$(string.hash(my.cmd)).err"
  my.p = proc.new(my.cmd, '.', '/dev/stdin', my.outname, my.errname)
  my.p.run()
  my.res = XML.new()
  define my.res.out = file.slurp(my.outname) ? ""
  define my.res.err = file.slurp(my.errname) ? ""
  file.delete(my.outname)
  file.delete(my.errname)
  return my.res
endfunction

function load_file(fn)
  debug('load_file "$(my.fn:)"')
  if file.exists(my.fn)
    gsl from my.fn
  endif
endfunction

# load xml
function load_xml(fn)
  debug('load_xml "$(my.fn:)"')
  if file.exists(my.fn)
    xml to root from my.fn
  endif
endfunction

function load_config
  debug('load_config')
  xml to root from "$(global.forgeit_path:)/forgeit.xml"
  for root->forgeit.resource as r
    r.registry_uri = env.get("FORGEIT_$(r.name:upper)_REGISTRY_URI") ? r.registry_uri
  endfor
endfunction

# copy dependencies to project
function copy_dependencies
  debug('copy_dependencies')
  for root->forgeit.resource as r
    for root->forgeit.$(r.name) as i
      copy i to project
    endfor
  endfor
endfunction

# create resource directories
function create_resource_directories
  debug('create_resource_directories')
  for root->forgeit.resource as r
    directory.create("$(global.resource_prefix:)/$(r.name:)")
  endfor
endfunction

# create project directories
function create_project_directories
  debug('create_project_directories')
  directory.create(global.build_path)
  directory.create(global.cache_path)
endfunction

function get_resource_path(item)
  if !defined(my.item.required_branch)
    error('$(my.item.name:) $(name(my.item):) does not define a required_branch attribute.')
  endif
  return "$(global.resource_prefix:)/$(name(my.item):)/$(my.item.name:)_$(my.item.required_branch:)"
endfunction

# convert required_version to required_branch
function convert_required_version_to_required_branch
  debug('convert_required_version_to_required_branch')
  for root->forgeit.resource as ri
    for project.$(ri.name) as i where defined(i.required_version) & !defined(i.required_branch)
      i.required_branch = "v$(i.required_version:)"
    endfor
  endfor
endfunction

# convert required_version to required_branch in a context
function convert_required_version_to_required_branch_in_ctx(ctx)
  debug('convert_required_version_to_required_branch_in_ctx')
  for root->forgeit.resource as r
    for my.ctx.$(r.name) as item
      if defined(item.required_version) & !defined(item.required_branch)
        item.required_branch = "v$(item.required_version:)"
      endif
    endfor
  endfor
endfunction

# convert version to branch for one item
function convert_version_to_branch(item)
  debug('convert_version_to_branch')
  if defined(my.item.version) & !defined(my.item.branch)
    my.item.branch = "v$(my.item.version:)"
  endif
  for my.item.compatible as c
    for root->forgeit.resource as r
      for c.$(r.name) as i where defined(i.required_version) & !defined(i.required_branch)
        i.required_branch = "v$(i.required_version:)"
      endfor
    endfor
  endfor
endfunction

# test if project node exists
function test_project
  debug('test_project')
  if !defined(root->project)
    error("No project node found.")
  endif
  if !defined(project.name)
    error("Project name is missing (project.name).")
  endif
  convert_version_to_branch(root->project)
endfunction

# get repository depth
function get_repository_depth(item)
  return defined(my.item.required_version) ?? " --depth 1" ? ""
endfunction

# retrieve resources
function retrieve_resources
  debug('retrieve_resources')
  for root->forgeit.resource as r
    for project.$(r.name) as i
      my.uri = "$(r.registry_uri:)/$(i.name:)"
      my.dst = get_resource_path(i)
      if !file.exists(my.dst)
        log("Retrieving $(i.name:) $(r.name:) ($(i.required_branch:))")
        my.res = exec("git clone$(get_repository_depth(i):) -b $(i.required_branch:) $(my.uri:) $(my.dst:)")
        if defined(string.locate(my.res.err, 'fatal'))
          debug(my.res.err)
          error("A fatal error occured while retrieving $(i.name:) $(r.name:).")
        endif
      endif
    endfor
  endfor
endfunction

# update resources
function update_resources
  debug('update_resources')
  for root->forgeit.resource as r
    for project.$(r.name) as i
      my.uri = "$(r.registry_uri:)/$(i.name:)"
      my.dst = get_resource_path(i)
      if !defined(i.required_version)
        log("Updating $(i.name:) $(r.name:) ($(i.required_branch:))")
        my.res = exec("git -C $(my.dst:) pull")
        debug(my.res.err)
        debug(my.res.out)
        if defined(string.locate(my.res.err, 'fatal'))
          debug(my.res.err)
          error("A fatal error occured while retrieving $(i.name:) $(r.name:).")
        endif
        if defined(string.locate(my.res.out, 'Updating'))
          log("$(i.name:) $(r.name:) has been updated.")
        endif
      endif
    endfor
  endfor
endfunction

# merge two nodes into the first one
function merge_two_nodes(node1, node2)
  for my.node2. as item
    copy item to my.node1
  endfor
endfunction

# copy nested dependencies to project
function copy_nested_dependencies
  debug('copy_nested_dependencies')
  for root->forgeit.resource as ri
    for project.$(ri.name) as i
      convert_required_version_to_required_branch_in_ctx(i)
      for root->forgeit.resource as rj
        for i.$(rj.name) as j where !defined(project->$(rj.name)(name=j.name & branch=j.required_branch))
          copy j to project
        endfor
      endfor
    endfor
  endfor
endfunction

function compare_branch(i1, i2)
  return my.i1.required_branch = my.i2.branch
endfunction

# load xml dependencies to project
function load_xml_dependencies
  debug('load_xml_dependencies')
  for root->forgeit.resource as r
    for project.$(r.name) as i where !defined(i.branch)
      my.xml_filename = "$(get_resource_path(i):)/$(i.name:).xml"
      debug(my.xml_filename)
      if file.exists(my.xml_filename)
        my.tmp = XML.new()
        xml to my.tmp from my.xml_filename
        convert_version_to_branch(my.tmp->$(r.name:))
        if !compare_branch(i, my.tmp->$(r.name:))
          error("$(r.name:) $(i.name:) is an inconsitent branch ($(i.required_branch:) <> $(my.tmp->$(r.name:).branch:)).")
        else
          i.branch = my.tmp->$(r.name:).branch
        endif
        merge_two_nodes(i, my.tmp->$(r.name:))
      endif
    endfor
  endfor
endfunction

# get, copy and load nested dependencies
function get_copy_load_nested_dependencies
  debug('get_copy_load_nested_dependencies')
  my.count = 0
  my.end = 0
  while !my.end
    my.end = 1
    for root->forgeit.resource as r
      for project.$(r.name) as i where !defined(i.branch)
        my.end = 0
      endfor
    endfor
    debug("save root_$(my.count)_1")
    project.save("$(global.build_path:)/root_$(my.count)_1.xml")
    convert_required_version_to_required_branch()
    debug("save root_$(my.count)_2")
    project.save("$(global.build_path:)/root_$(my.count)_2.xml")
    retrieve_resources()
    debug("save root_$(my.count)_3")
    project.save("$(global.build_path:)/root_$(my.count)_3.xml")
    load_xml_dependencies()
    debug("save root_$(my.count)_4")
    project.save("$(global.build_path:)/root_$(my.count)_4.xml")
    copy_nested_dependencies()
    debug("save root_$(my.count)_5")
    project.save("$(global.build_path:)/root_$(my.count)_5.xml")
    my.count += 1
  endwhile
endfunction

# check compatibility
function check_compatibility
  debug('check_compatibility')
  for root->forgeit.resource as ri
    for project.$(ri.name) as i where defined(i->compatible)
      debug('check compatibility for $(i.name:) $(ri.name:)')
      for i.compatible as c
        for root->forgeit.resource as rj
          for c.$(rj.name) as j
            if !defined(project->$(rj.name)(name=j.name))
              error('$(ri.name:) $(i.name) ($(i.branch:)) requires $(rj.name:) $(j.name:) ($(j.required_branch:)).')
            elsif !defined(project->$(rj.name)(name=j.name & branch=j.required_branch))
              error('compatibility issue beetween $(ri.name:) $(i.name) and $(rj.name:) $(j.name:).')
            endif
          endfor
        endfor
      endfor
    endfor
  endfor
endfunction

# load core dependencies
function load_core_dependencies(ctx)
  debug('load_core_dependencies')
  my.ctx ?= root->forgeit
  for project.core as c1
    for my.ctx.core as c2 where c1.name = c2.name & c1.branch = c2.required_branch
      log("Loading $(c1.name:) core ($(c1.branch:))")
      load_file("$(get_resource_path(c1):)/$(c1.name:).gsl")
    endfor
  endfor
endfunction

# check protocol
function check_protocol
  debug('check_protocol')
  protocol__check(root->forgeit)
  for root->forgeit.resource as r
    for project.$(r.name) as i
      debug('check $(i.name:) $(r.name:) protocol')
      protocol__check(i, root, '$(i.name:)][')
    endfor
  endfor
endfunction

# load extension dependencies
function load_extension_dependencies(resource, file)
  debug('load_extension_dependencies')
  for project.extension where (defined(extension->compatible) & defined(extension->compatible->$(name(my.resource))(name=my.resource.name & required_branch=my.resource.branch))) | !defined(extension->compatible)
    debug("Loading $(extension.name:) extension ($(extension.branch:)) $(my.file:)")
    load_file("$(get_resource_path(extension):)/$(my.file:)")
  endfor
endfunction

# create current module directories
function create_cm_directories
  debug('create_cm_directories')
  directory.create(global.cm_build_path)
  directory.create(global.cm_cache_path)
endfunction

# load module dependencies
function load_module_dependencies
  debug('load_module_dependencies')
  for project.module
    global.logcnt = module.name
    log("Loading $(module.name:) module ($(module.branch:))")
    global.cm_build_path = "$(global.build_path:)$(module.name:)"
    global.cm_cache_path = "$(global.cache_path:)$(module.name:)"
    log("---")
    log("$("cm_build_path"%15s): [$(global.cm_build_path:)]")
    log("$("cm_cache_path"%15s): [$(global.cm_cache_path:)]")
    log("---")
    load_core_dependencies(module)
    directory.setcwd(get_resource_path(module))
    load_file("utils.gsl")
    load_extension_dependencies(module, "pre.gsl")
    load_xml("abstractor.xml")
    create_cm_directories()
    load_file("$(get_resource_path(module):)/script.gsl")
    load_file("$(global.forgeit_path:)/assets/requirements__txt.gsl")
    load_file("$(global.forgeit_path:)/assets/package__json.gsl")
    load_file("$(global.forgeit_path:)/assets/module__bootstrap__sh.gsl")
    load_file("build__sh.gsl")
    load_file("run__sh.gsl")
    abstractor__create_dirs(root->abstractor, global.cm_build_path)
    abstractor__create_files(root->abstractor, global.cm_build_path)
    if defined(root->abstractor)
      delete root->abstractor
    endif
    load_extension_dependencies(module, "post.gsl") # DO FILES LOCATION GOOD ???
    directory.setcwd(global.project_path)
    global.logcnt = "4i"
  endfor
endfunction

function load_pre_file
  load_file('$(global.project_path:)/pre.gsl')
endfunction

function load_post_file
  load_file('$(global.project_path:)/post.gsl')
endfunction

function create_assets
  debug('create_assets')
  load_file("$(global.forgeit_path:)/assets/bootstrap__sh.gsl")
  load_file("$(global.forgeit_path:)/assets/run__sh.gsl")
  load_file("$(global.forgeit_path:)/assets/command__sh.gsl")
  file__copy_files(project, '', global.build_path)
endfunction

# print global variables
function print_variables
  log("---")
  log("$("project_name"%15s): [$(global.project_name:)]")
  log("$("debug"%15s): [$(global.debug:)]")
  log("$("resource_prefix"%15s): [$(global.resource_prefix:)]")
  log("$("forgeit_path"%15s): [$(global.forgeit_path:)]")
  log("$("project_path"%15s): [$(global.project_path:)]")
  log("$("build_path"%15s): [$(global.build_path:)]")
  log("$("cache_path"%15s): [$(global.cache_path:)]")
  log("---")
endfunction

# ready message
function ready
  log("The project $(global.project_name:) is ready, here are the post-processing scripts that can be called from now:")
  log("$("bootstrap"%10s): [4i bootstrap $(project_name:)]")
  log("$("run"%10s): [4i run $(project_name:)]")
  for project.module as m
    log("$(m.name%10s): [4i command $(project_name:) $(m.name:)]")
  endfor
  log("---")
endfunction

.endtemplate