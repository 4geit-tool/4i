.template 0

#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# Authors:
# Caner Candan <caner@candan.fr>, http://caner.candan.fr
#

function log(msg, ctx)
  if defined(my.ctx)
    echo "[$(global.logcnt:)][$(my.ctx:)] $(my.msg:)"
  else
    echo "[$(global.logcnt:)] $(my.msg:)"
  endif
endfunction

function debug(msg, ctx)
  if !global.debug
    return
  endif
  if defined(my.ctx)
    echo "[$(global.logcnt:)][$(my.ctx:)][debug] $(my.msg:)"
  else
    echo "[$(global.logcnt:)][debug] $(my.msg:)"
  endif
endfunction

function error(msg, ctx)
  if defined(my.ctx)
    abort "[$(global.logcnt:)][$(my.ctx:)][error] $(my.msg:)"
  else
    abort "[$(global.logcnt:)][error] $(my.msg:)"
  endif
endfunction

# exec a command and redirects the output as a function return value
function exec(cmd)
  debug('exec "$(my.cmd:)"')
  my.outname = "/tmp/gslcmd_$(string.hash(my.cmd)).out"
  my.errname = "/tmp/gslcmd_$(string.hash(my.cmd)).err"
  my.p = proc.new(my.cmd, '.', '/dev/stdin', my.outname, my.errname)
  my.p.run()
  my.res = XML.new()
  define my.res.out = file.slurp(my.outname) ? ""
  define my.res.err = file.slurp(my.errname) ? ""
  file.delete(my.outname)
  file.delete(my.errname)
  return my.res
endfunction

function load_file(fn)
  debug('load_file "$(my.fn:)"')
  if file.exists(my.fn)
    gsl from my.fn
  endif
endfunction

# load xml
function load_xml(fn)
  debug('load_xml "$(my.fn:)"')
  if file.exists(my.fn)
    xml to root from my.fn
  endif
endfunction

function load_config
  debug('load_config')
  xml to root from "$(global.forgeit_path:)/forgeit.xml"
  for root->forgeit.resource as r
    r.registry_uri = env.get("FORGEIT_$(r.name:upper)_REGISTRY_URI") ? r.registry_uri
  endfor
endfunction

# copy dependencies to project
function copy_dependencies
  debug('copy_dependencies')
  for root->forgeit.resource as r
    for root->forgeit.$(r.name) as i
      copy i to project
    endfor
  endfor
endfunction

# create resource directories
function create_resource_directories
  debug('create_resource_directories')
  for root->forgeit.resource as r
    directory.create("$(global.resource_prefix:)/$(r.name:)")
  endfor
endfunction

function get_resource_path(item)
  if !defined(my.item.required_branch)
    error('$(my.item.name:) $(name(my.item):) does not define a required_branch attribute.')
  endif
  return "$(global.resource_prefix:)/$(name(my.item):)/$(my.item.name:)_$(my.item.required_branch:)/"
endfunction

# convert required_version to required_branch
function convert_required_version_to_required_branch
  debug('convert_required_version_to_required_branch')
  for root->forgeit.resource as ri
    for project.$(ri.name) as i where defined(i.required_version) & !defined(i.required_branch)
      i.required_branch = "v$(i.required_version:)"
    endfor
  endfor
endfunction

# convert required_version to required_branch in a context
function convert_required_version_to_required_branch_in_ctx(ctx)
  debug('convert_required_version_to_required_branch_in_ctx')
  for root->forgeit.resource as r
    for my.ctx.$(r.name) as item
      if defined(item.required_version) & !defined(item.required_branch)
        item.required_branch = "v$(item.required_version:)"
      endif
    endfor
  endfor
endfunction

# convert version to branch for one item
function convert_version_to_branch(item)
  debug('convert_version_to_branch')
  if defined(my.item.version) & !defined(my.item.branch)
    my.item.branch = "v$(my.item.version:)"
  endif
  for my.item.compatible as c
    for root->forgeit.resource as r
      for c.$(r.name) as i where defined(i.required_version) & !defined(i.required_branch)
        i.required_branch = "v$(i.required_version:)"
      endfor
    endfor
  endfor
endfunction

# test if project node exists
function test_project
  debug('test_project')
  if !defined(root->project)
    error("No project node found.")
  endif
  if !defined(project.name)
    error("Project name is missing (project.name).")
  endif
  if !defined(project->module)
    new project.module as m
      m.name = '4i'
      m.required_branch='master'
    endnew
  endif
  directory.create(global.build_path)
  directory.create(global.cache_path)
  directory.create(global.debug_path)
  directory.setcwd(global.forgeit_path)
  convert_version_to_branch(root->project)
endfunction

# get repository depth
function get_repository_depth(item)
  return defined(my.item.required_version) ?? " --depth 1" ? ""
endfunction

# retrieve resources
function retrieve_resources
  debug('retrieve_resources')
  for root->forgeit.resource as r
    for project.$(r.name) as i
      my.uri = "$(r.registry_uri:)/$(i.name:)"
      my.dst = get_resource_path(i)
      if !file.exists(my.dst)
        log("Retrieving $(i.name:) $(r.name:) ($(i.required_branch:))")
        my.res = exec("git clone$(get_repository_depth(i):) -b $(i.required_branch:) $(my.uri:) $(my.dst:)")
        if defined(string.locate(my.res.err, 'fatal'))
          debug(my.res.err)
          error("A fatal error occured while retrieving $(i.name:) $(r.name:).")
        endif
      endif
    endfor
  endfor
endfunction

# update resources
function update_resources
  if !defined(env.get("FORGEIT_UPDATE"))
    return
  endif
  debug('update_resources')
  for root->forgeit.resource as r
    for project.$(r.name) as i
      my.uri = "$(r.registry_uri:)/$(i.name:)"
      my.dst = get_resource_path(i)
      if !defined(i.required_version)
        log("Updating $(i.name:) $(r.name:) ($(i.required_branch:))")
        my.res = exec("git -C $(my.dst:) pull")
        debug(my.res.err)
        debug(my.res.out)
        if defined(string.locate(my.res.err, 'fatal'))
          debug(my.res.err)
          error("A fatal error occured while retrieving $(i.name:) $(r.name:).")
        endif
        if defined(string.locate(my.res.out, 'Updating'))
          log("$(i.name:) $(r.name:) has been updated.")
        endif
      endif
    endfor
  endfor
endfunction

# merge two nodes into the first one
function merge_two_nodes(node1, node2)
  for my.node2. as item
    copy item to my.node1
  endfor
endfunction

# copy nested dependencies to project
function copy_nested_dependencies
  debug('copy_nested_dependencies')
  for root->forgeit.resource as ri
    for project.$(ri.name) as i
      convert_required_version_to_required_branch_in_ctx(i)
      for root->forgeit.resource as rj
        for i.$(rj.name) as j where !defined(project->$(rj.name)(name=j.name & branch=j.required_branch))
          copy j to project before i
        endfor
      endfor
    endfor
  endfor
endfunction

function compare_branch(i1, i2)
  return my.i1.required_branch = my.i2.branch
endfunction

# load xml dependencies to project
function load_xml_dependencies
  debug('load_xml_dependencies')
  for root->forgeit.resource as r
    for project.$(r.name) as i where !defined(i.branch)
      my.xml_filename = "$(get_resource_path(i):)$(r.name:).xml"
      debug(my.xml_filename)
      if file.exists(my.xml_filename)
        my.tmp = XML.new()
        xml to my.tmp from my.xml_filename
        convert_version_to_branch(my.tmp->$(r.name:))
        if !compare_branch(i, my.tmp->$(r.name:))
          error("$(r.name:) $(i.name:) is an inconsitent branch ($(i.required_branch:) <> $(my.tmp->$(r.name:).branch:)).")
        else
          i.branch = my.tmp->$(r.name:).branch
        endif
        merge_two_nodes(i, my.tmp->$(r.name:))
      else
        error('$(i.name:) $(r.name:) does not exist.')
      endif
    endfor
  endfor
endfunction

# get, copy and load nested dependencies
function get_copy_load_nested_dependencies
  debug('get_copy_load_nested_dependencies')
  my.count = 0
  my.end = 0
  while !my.end & my.count < 10
    my.end = 1
    for root->forgeit.resource as r
      for project.$(r.name) as i where !defined(i.branch)
        my.end = 0
      endfor
    endfor
    convert_required_version_to_required_branch()
    retrieve_resources()
    load_xml_dependencies()
    copy_nested_dependencies()
    my.count += 1
  endwhile
endfunction

# check compatibility
function check_compatibility
  debug('check_compatibility')
  for root->forgeit.resource as ri
    for project.$(ri.name) as i where defined(i->compatible)
      debug('check compatibility for $(i.name:) $(ri.name:)')
      for i.compatible as c
        for root->forgeit.resource as rj
          for c.$(rj.name) as j
            if !defined(project->$(rj.name)(name=j.name))
              error('$(ri.name:) $(i.name) ($(i.branch:)) requires $(rj.name:) $(j.name:) ($(j.required_branch:)).')
            elsif !defined(project->$(rj.name)(name=j.name & branch=j.required_branch))
              error('compatibility issue beetween $(ri.name:) $(i.name) and $(rj.name:) $(j.name:).')
            endif
          endfor
        endfor
      endfor
    endfor
  endfor
endfunction

# load core dependencies
function load_core_dependencies(ctx)
  debug('load_core_dependencies')
  my.ctx ?= root->forgeit
  for project.core as c1
    for my.ctx.core as c2 where c1.name = c2.name & c1.branch = c2.required_branch
      log("Loading $(c1.name:) core ($(c1.branch:))")
      directory.setcwd(get_resource_path(c1))
      load_file("$(get_resource_path(c1):)core.gsl")
      directory.setcwd(global.forgeit_path)
    endfor
  endfor
endfunction

function cleanup(ctx)
  my.ctx ?= root
  if defined(my.ctx.origin)
    delete my.ctx
  endif
  for my.ctx. as item
    if class(item) = "XML value"
      next
    endif
    cleanup(item)
  endfor
endfunction

function cleanup_protocol_node(ctx)
  my.ctx ?= root
  for my.ctx.protocol_node as pn
    delete pn
  endfor
  for my.ctx. as item
    if class(item) = "XML value"
      next
    endif
    cleanup_protocol_node(item)
  endfor
endfunction

function cleanup_resource_less(ctx)
  my.ctx ?= root
  for root->forgeit.resource as r
    for project.$(r.name) as i
      delete i
    endfor
  endfor
  for my.ctx. as item
    if class(item) = "XML value"
      next
    endif
    cleanup_resource_less(item)
  endfor
endfunction

function process_references
  my.count = 0
  while my.count < 10
    reference__process('node', 'node', root)
    reference__process('group', 'group', root)
    my.count += 1
  endwhile
endfunction process_references

function hook_load_protocol(hook)
  protocol__$(my.hook)(root->forgeit)
  for root->forgeit.resource as r
    for project.$(r.name) as i where !defined(i.load) | (defined(i.load) & i.load = "True")
      debug('$(my.hook) $(i.name:) $(r.name:) protocol')
      protocol__$(my.hook)(i)
    endfor i
  endfor r
endfunction hook_load_protocol

function hook_load_priority_protocol(hook, priority)
  my.priority ?= "normal"
  protocol__$(my.hook)(root->forgeit, my.priority)
  for root->forgeit.resource as r
    for project.$(r.name) as i where !defined(i.load) | (defined(i.load) & i.load = "True")
      debug('$(my.hook) $(i.name:) $(r.name:) protocol [$(my.priority)]')
      protocol__$(my.hook)(i, my.priority)
    endfor i
  endfor r
endfunction hook_load_protocol

# check and load protocol
function check_load_protocol
  debug('check_load_protocol')
  process_references()
  hook_load_protocol("add")
  hook_load_priority_protocol("load_pre_combine", "very_strong")
  hook_load_priority_protocol("load_pre_combine", "strong")
  hook_load_priority_protocol("load_pre_combine", "normal")
  hook_load_priority_protocol("load_pre_combine", "weak")
  hook_load_priority_protocol("load_pre_combine", "very_weak")
  hook_load_protocol("virtual")
  hook_load_protocol("combine")
  protocol__load_pre_check()
  protocol__check()
endfunction

# load module dependencies
function load_module_dependencies
  debug('load_module_dependencies')

  protocol__load_pre()

  for project.module where !defined(load) | (defined(load) & load = "True")
    log("Pre-loading $(module.name:) module ($(module.branch:))")
    global.cm_build_path = global.build_path
    global.cm_cache_path = global.cache_path
    log("---")
    
    global.logcnt = module.name
    load_core_dependencies(module)
    directory.setcwd(get_resource_path(module))
    load_file("utils.gsl")
    load_file("pre.gsl")
    directory.setcwd(global.forgeit_path)
    global.logcnt = "4i"
  endfor

  global.debug = 1
  protocol__load_post()
  global.debug = 0

  for project.module where !defined(load) | (defined(load) & load = "True")
    log("Post-loading $(module.name:) module ($(module.branch:))")
    global.cm_build_path = global.build_path
    global.cm_cache_path = global.cache_path
    log("---")

    global.logcnt = module.name
    load_core_dependencies(module)
    directory.setcwd(get_resource_path(module))
    load_file("utils.gsl")
    load_xml("abstractor.xml")
    load_file("script.gsl")
    abstractor__create_dirs(root->abstractor, global.cm_build_path)
    abstractor__create_files(root->abstractor, global.cm_build_path)
    if defined(root->abstractor)
      delete root->abstractor
    endif
    load_file("post.gsl")
    directory.setcwd(global.forgeit_path)
    global.logcnt = "4i"
  endfor
endfunction

function load_pre_file
  load_file('$(global.project_path:)/pre.gsl')
endfunction

function load_post_file
  load_file('$(global.project_path:)/post.gsl')
endfunction

# print global variables
function print_variables
  log("---")
  log("$("project_name"%15s): [$(global.project_name:)]")
  log("$("debug"%15s): [$(global.debug:)]")
  log("$("resource_prefix"%15s): [$(global.resource_prefix:)]")
  log("$("forgeit_path"%15s): [$(global.forgeit_path:)]")
  log("$("project_path"%15s): [$(global.project_path:)]")
  log("$("build_path"%15s): [$(global.build_path:)]")
  log("$("cache_path"%15s): [$(global.cache_path:)]")
  log("---")
endfunction

function save_debug
  root.save('$(debug_path:)/root.xml')
  project.save('$(debug_path:)/project.xml')

  cleanup_protocol_node()
  root.save('$(debug_path:)/root_protocol_clean.xml')
  project.save('$(debug_path:)/project_protocol_clean.xml')

  cleanup_resource_less()
  root.save('$(debug_path:)/root_resource_less.xml')
  project.save('$(debug_path:)/project_resource_less.xml')

  cleanup()
  root.save('$(debug_path:)/root_clean.xml')
  project.save('$(debug_path:)/project_clean.xml')
endfunction

function ready
  save_debug()
  log("The project $(global.project_name:) is ready, here are the post-processing scripts that can be called from now:")
  log("$("bootstrap"%10s): [4i bootstrap]")
  log("$("launch"%10s): [4i launch]")
  log("$("command"%10s): [4i command]")
  log("---")
endfunction

.endtemplate