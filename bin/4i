#!/usr/bin/env python2
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# Authors:
# Caner Candan <caner@candan.fr>, http://caner.candan.fr
#

import argparse, subprocess, sys, os, shutil, logging
from collections import OrderedDict
from operator import itemgetter
import xml.etree.ElementTree as ET

VERSION = "master"
RESOURCES = ['tool', 'core', 'module', 'project']

LEVELS = OrderedDict([('debug', logging.DEBUG),
                      ('info', logging.INFO),
                      ('warning', logging.WARNING),
                      ('error', logging.ERROR),
                      ('quiet', logging.CRITICAL),])

logger = logging.getLogger("4i")

RESET = '\033[0m'
BOLD = '\033[01m'
DISABLE = '\033[02m'
UNDERLINE = '\033[04m'
REVERSE = '\033[07m'
STRIKE_THROUGH = '\033[09m'
INVISIBLE = '\033[08m'

FG_BLACK = '\033[30m'
FG_RED = '\033[31m'
FG_GREEN = '\033[32m'
FG_ORANGE = '\033[33m'
FG_BLUE = '\033[34m'
FG_PURPLE = '\033[35m'
FG_CYAN = '\033[36m'
FG_LIGHT_GREY = '\033[37m'
FG_DARK_GREY = '\033[90m'
FG_LIGHT_RED = '\033[91m'
FG_LIGHT_GREEN = '\033[92m'
FG_YELLOW = '\033[93m'
FG_LIGHT_BLUE = '\033[94m'
FG_PINK = '\033[95m'
FG_LIGHT_CYAN = '\033[96m'

BG_BLACK = '\033[40m'
BG_RED = '\033[41m'
BG_GREEN = '\033[42m'
BG_ORANGE = '\033[43m'
BG_BLUE = '\033[44m'
BG_PURPLE = '\033[45m'
BG_CYAN = '\033[46m'
BG_LIGHT_GREY = '\033[47m'

def draw(text, bold=False, underline=False, strike_through=False, disable=False, reverse=False, invisible=False,
         fg_black=False, fg_red=False, fg_green=False, fg_orange=False, fg_blue=False, fg_purple=False, fg_cyan=False, fg_light_grey=False, fg_dark_grey=False, fg_light_red=False, fg_light_green=False, fg_yellow=False, fg_light_blue=False, fg_pink=False, fg_light_cyan=False,
         bg_black=False, bg_red=False, bg_green=False, bg_orange=False, bg_blue=False, bg_purple=False, bg_cyan=False, bg_light_grey=False):
    style = ''

    if not isinstance(text, str):
        text = str(text)

    if bold:
        style += BOLD
    if disable:
        style += DISABLE
    if underline:
        style += UNDERLINE
    if reverse:
        style += REVERSE
    if strike_through:
        style += STRIKE_THROUGH
    if invisible:
        style += INVISIBLE
    if fg_black:
        style += FG_BLACK
    if fg_red:
        style += FG_RED
    if fg_green:
        style += FG_GREEN
    if fg_orange:
        style += FG_ORANGE
    if fg_blue:
        style += FG_BLUE
    if fg_purple:
        style += FG_PURPLE
    if fg_cyan:
        style += FG_CYAN
    if fg_light_grey:
        style += FG_LIGHT_GREY
    if fg_dark_grey:
        style += FG_DARK_GREY
    if fg_light_red:
        style += FG_LIGHT_RED
    if fg_light_green:
        style += FG_LIGHT_GREEN
    if fg_yellow:
        style += FG_YELLOW
    if fg_light_blue:
        style += FG_LIGHT_BLUE
    if fg_pink:
        style += FG_PINK
    if fg_light_cyan:
        style += FG_LIGHT_CYAN
    if bg_black:
        style += BG_BLACK
    if bg_red:
        style += BG_RED
    if bg_green:
        style += BG_GREEN
    if bg_orange:
        style += BG_ORANGE
    if bg_blue:
        style += BG_BLUE
    if bg_purple:
        style += BG_PURPLE
    if bg_cyan:
        style += BG_CYAN
    if bg_light_grey:
        style += BG_LIGHT_GREY

    if style:
        text = style + text + RESET

    return text

def error(text):
    return draw(text, bold=True, fg_red=True)

def warning(text):
    return draw(text, bold=True, fg_orange=True)

def success(text):
    return draw(text, fg_green=True)

class AbstractCommand(object):
    def __init__(self, args):
        self.args = args
        logger.debug('AbstractCommand')

    def __call__(self):
        logger.debug('AbstractCommand call')
        self.call()

    @staticmethod
    def is_file_empty(fn):
        return os.stat(fn).st_size == 0

    @staticmethod
    def get_name_branch(item):
        kwds = item.split('_')
        name = '_'.join(kwds[:-1])
        branch = kwds[-1]
        return name, branch

    @staticmethod
    def name_branch_filter((name, branch)):
        if not args.name: return True
        if name != args.name: return False
        if not args.branch: return True
        if branch != args.branch: return False
        return True

    @staticmethod
    def resource_filter(resource):
        return not args.resource or (args.resource and resource == args.resource)

    @staticmethod
    def listdir(path):
        try:
            for name, branch in sorted(map(AbstractCommand.get_name_branch, os.listdir(path)), key=itemgetter(0)):
                yield name, branch
        except OSError:
            pass

    @staticmethod
    def findall(root, tag):
        return [tuple(x.attrib.values()) for x in root.findall(tag)]

    @staticmethod
    def execute(cmd, piped=True, _input=None, cwd=None):
        logger.debug('execute')
        logger.debug(cmd)
        try:
            if piped:
                p = subprocess.Popen(cmd.split(), cwd=cwd, stdin=subprocess.PIPE,
                                     stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                if _input:
                    out, err = p.communicate(input=_input)
                else:
                    out, err = p.communicate()
                logger.debug(out)
                logger.debug(err)
                return out, err
            else:
                subprocess.call(cmd.split(), cwd=cwd)
        except KeyboardInterrupt:
            print warning('Canceled')
            sys.exit(-1)

    @staticmethod
    def rmtree(path):
        try:
            shutil.rmtree(path)
        except OSError:
            pass

    @staticmethod
    def copytree(src, dst):
        try:
            shutil.copytree(src, dst)
        except OSError:
            pass

    @staticmethod
    def parse(path):
        try:
            tree = ET.parse(path)
            root = tree.getroot()
            return root
        except IOError:
            return None

class Build(AbstractCommand):
    def call(self):
        logger.debug('build')

        if self.is_file_empty(self.args.project_xml):
            logger.error('The project file %s is empty.' % self.args.project_xml)
            sys.exit(-1)

        self.execute("gsl -a -script:%s/share/4i/script.gsl %s" % \
                     (os.environ['FORGEIT_PREFIX'], self.args.project_xml),
                     piped=False)

class Create(AbstractCommand):
    def call(self):
        logger.debug('create')

        print 'Creating %s resource...' % self.args.resource
        print '-'*80
        print '{:<60}{:<20}'.format(self.args.name, self.args.branch)
        sys.stdout.flush()
        registry_uri = os.environ.get('FORGEIT_%s_REGISTRY_URI' % self.args.resource.upper())
        if not registry_uri:
            print 'Registry URI not available.'
            sys.exit(-1)
        uri = '%s/%s' % (registry_uri, self.args.name)
        logger.debug(uri)
        if 'file://' in uri:
            uri_dst = '%s.git' % uri.replace('file://', '')
            if os.path.isdir(uri_dst):
                logger.error('remote %s %s already exists.', self.args.name, self.args.resource)
            else:
                out, err = self.execute('git init --bare %s' % uri_dst)
        dst = '%s/%s/%s_%s' % (os.environ['FORGEIT_RESOURCE_PREFIX'],
                               self.args.resource, self.args.name, self.args.branch)
        logger.debug(dst)
        out, err = self.execute('git clone -q %s %s' % (uri, dst))
        if 'already exists' in err:
            logger.error('%s (%s) %s already exists.', self.args.name, self.args.branch, self.args.resource)
        if 'Could not read from remote repository' in err:
            logger.error('%s (%s) %s failed to be retrieved.', self.args.name, self.args.branch, self.args.resource)
        if 'not found' in err:
            logger.error('%s (%s) %s is not found.', self.args.name, self.args.branch, self.args.resource)
        if 'empty repository' in err:
            # out, err = execute('git -C %s commit -q --allow-empty -m "+init"' % dst)
            with open('%s/%s.xml' % (dst, self.args.resource), 'w') as f:
                f.write("""\
<?xml version="1.0"?>
<{2} name="{0}" branch="{1}">
</{2}>\
""".format(self.args.name, self.args.branch, self.args.resource))
            with open('%s/.gitignore' % dst, 'w') as f:
                f.write("""\
build
.cache
root.xml
deprecated
releases\
""")
            out, err = self.execute('git -C %s add %s.xml .gitignore' % (dst, self.args.resource))
            out, err = self.execute('git -C %s commit -q -m "+init"' % dst)
            out, err = self.execute('git -C %s push -q' % dst)

class List(AbstractCommand):
    def call(self):
        logger.debug('list')

        for resource in RESOURCES:
            print '{:^80}'.format(resource.upper())
            print 80*'-'
            print '{:<40}{:<20}{:<20}'.format('Name', 'Branch', 'Status')
            print 80*'-'
            path = "%s/%s" % (os.environ['FORGEIT_RESOURCE_PREFIX'], resource)
            for name, branch in self.listdir(path):
                status = success('ok')
                out, err = self.execute('git -C %s/%s_%s status' % (path, name, branch))
                if 'Changes not staged for commit' in out:
                    status = error('uncommitted')
                elif 'Changes to be committed' in out:
                    status = error('uncommitted')
                elif 'Untracked files' in out:
                    status = warning('untracked')
                elif 'Your branch is ahead' in out:
                    status = error('unpushed')
                print '{:<40}{:<20}{:<20}'.format(name, branch, status)
            print

class Update(AbstractCommand):
    def update_item(self, resource, name, branch):
        print '{:<60}{:<20}'.format(name, branch)
        sys.stdout.flush()
        out, err = self.execute('git -C %s/%s/%s_%s pull -q' % \
                                (os.environ['FORGEIT_RESOURCE_PREFIX'],
                                 resource, name, branch))

    def call(self):
        logger.debug('update')

        for resource in filter(self.resource_filter, RESOURCES):
            print 'Updating %s resource...' % resource
            print '-'*80
            path = "%s/%s" % (os.environ['FORGEIT_RESOURCE_PREFIX'], resource)
            for name, branch in filter(self.name_branch_filter, self.listdir(path)):
                self.update_item(resource, name, branch)
            print

class Retrieve(AbstractCommand):
    def call(self):
        logger.debug('retrieve')

        print 'Retrieving %s resource...' % self.args.resource
        print '-'*80
        print '{:<60}{:<20}'.format(self.args.name, self.args.branch)
        sys.stdout.flush()
        registry_uri = os.environ.get('FORGEIT_%s_REGISTRY_URI' % self.args.resource.upper())
        if not registry_uri:
            print 'Registry URI not available.'
            sys.exit(-1)
        uri = '%s/%s' % (registry_uri, self.args.name)
        logger.debug(uri)
        dst = '%s/%s/%s_%s' % (os.environ['FORGEIT_RESOURCE_PREFIX'],
                               self.args.resource, self.args.name, self.args.branch)
        logger.debug(dst)
        out, err = AbstractCommand.execute('git clone -q -b %s %s %s' % (self.args.branch, uri, dst))
        if 'already exists' in err:
            logger.error('%s (%s) %s already exists.', self.args.name, self.args.branch, self.args.resource)
        if 'Could not read from remote repository' in err:
            logger.error('%s (%s) %s failed to be retrieved.', self.args.name, self.args.branch, self.args.resource)
        if 'not found' in err:
            logger.error('%s (%s) %s is not found.', self.args.name, self.args.branch, self.args.resource)

class Bootstrap(AbstractCommand):
    def call(self):
        logger.debug('bootstrap')
        self.execute('./build/%s/bootstrap.sh' % self.args.project, piped=False)

class Run(AbstractCommand):
    def call(self):
        logger.debug('run')
        self.execute('./build/%s/run.sh %s' % (self.args.project, self.args.module), piped=False)

class Command(AbstractCommand):
    def call(self):
        logger.debug('command')
        self.execute('./build/%s/%s_command.sh %s' % (self.args.project, self.args.module, ' '.join(self.args.command)), piped=False)

class Clean(AbstractCommand):
    def call(self):
        logger.debug('clean')
        print warning('Cleaning up the building directory...')
        self.rmtree('./build')

class CleanResources(AbstractCommand):
    def call(self):
        logger.debug('clean_resources')
        for resource in RESOURCES:
            print warning('Cleaning up %s resources...' % resource)
            self.rmtree('%s/%s' % (os.environ['FORGEIT_RESOURCE_PREFIX'], resource))

from filecmp import cmp, dircmp
            
class Test(AbstractCommand):
    def list(self):
        print '{:^80}'.format("%s (%s)" % (self.resource_name.upper(), self.resource_branch))
        print 80*'-'
        print '{:<20}{:<60}'.format('Name', 'Description')
        print 80*'-'
        sys.stdout.flush()
        for test_name, test_description in self.test_nodes:
            print '{:<20}{:<60}'.format(test_name, test_description)
        print

    def compare_file(self, src, dst):
        if os.path.isfile(src) and os.path.isfile(dst):
            return cmp(src, dst)
        return True

    def compare(self):
        self.failed = False
        self.diff_files = []
        self.common_files = []
        
        if not self.compare_file(self.stdout_path, self.out_path):
            self.failed = True
            self.diff_files.append('stdout')
        if not self.compare_file(self.stderr_path, self.err_path):
            self.failed = True
            self.diff_files.append('stderr')

        def nested_search(dcmp):
            if dcmp.diff_files:
                self.failed = True
                self.diff_files += dcmp.diff_files
            if dcmp.common_files:
                self.common_files += dcmp.common_files
            for sub_dcmp in dcmp.subdirs.values():
                nested_search(sub_dcmp)
        
        test_output_path = '%s/output' % self.test_path
        build_output_path = '%s/build' % self.build_path

        if os.path.exists(test_output_path) and os.path.exists(build_output_path):
            try:
                d = dircmp(test_output_path, build_output_path)
                nested_search(d)
            except OSError as e:
                logger.error('an error occured with the output folder.')
                logger.debug(e)
                self.failed = True

        print '{:<10}'.format(success('succeed') if not self.failed else error('failed'))
        for f in self.diff_files: logger.debug(error('[diff file] %s' % f))
        for f in self.common_files: logger.debug(success('[common file] %s' % f))
        
    def run(self):
        print 'Testing %s module (%s)...' % (self.resource_name, self.resource_branch)
        print '-'*80
        sys.stdout.flush()

        test_filter = lambda (n,d): not args.tests or (self.args.tests and n in self.args.tests)

        try:
            for test_name, test_description in filter(test_filter, self.test_nodes):
                print '{:<70}'.format(test_name),

                self.test_path = '%s/%s_%s/tests/%s' % (self.resource_path, self.resource_name, self.resource_branch, test_name)
                self.build_path = '/tmp/.4geit/module/%s_%s/tests/%s' % (self.resource_name, self.resource_branch, test_name)

                self.rmtree(self.build_path)
                self.copytree(self.test_path, self.build_path)

                try:
                    out, err = self.execute("gsl -a -script:%s/share/4i/script.gsl project.xml" % os.environ['FORGEIT_PREFIX'], piped=True, cwd=self.build_path)
                except OSError as e:
                    logger.error('an error occured with the test folder.')
                    logger.debug(e)
                    continue
                
                self.out_path = '%s/out.txt' % self.build_path
                self.err_path = '%s/err.txt' % self.build_path
                self.stdout_path = '%s/stdout.txt' % self.build_path
                self.stderr_path = '%s/stderr.txt' % self.build_path

                with open(self.out_path, 'w') as f: f.write(out)
                with open(self.err_path, 'w') as f: f.write(err)

                self.compare()
                sys.stdout.flush()
            print
        except ValueError as e:
            logger.error('test node badly formated.')
            logger.debug(e)

    def call(self):
        logger.debug('test')

        self.resource_path = "%s/%s" % (os.environ['FORGEIT_RESOURCE_PREFIX'], 'module')
        for self.resource_name, self.resource_branch in filter(self.name_branch_filter, self.listdir(self.resource_path)):
            self.resource_xml_path = "%s/%s_%s/module.xml" % (self.resource_path, self.resource_name, self.resource_branch)
            self.root = self.parse(self.resource_xml_path)
            if self.root is not None:
                self.test_nodes = self.findall(self.root, 'test')
                if not self.test_nodes:
                    continue

                if self.args.list:
                    self.list()
                else:
                    self.run()

if __name__ == '__main__':
    common_options = {'formatter_class': argparse.ArgumentDefaultsHelpFormatter}

    parser = argparse.ArgumentParser(description='4i model-oriented programming compiler.', **common_options)

    parser.add_argument('--verbose', '-v', choices=list(LEVELS), default='error', help='Set a verbosity level.')
    parser.add_argument('--levels', '-l', action='store_true', default=False, help='List all the verbosity levels.')
    parser.add_argument('--output', '-o', help='all the logging messages are redirected to the specified filename.')
    parser.add_argument('--debug', '-d', action='store_const', const='debug', dest='verbose', help='Display all the messages.')
    parser.add_argument('--info', '-i', action='store_const', const='info', dest='verbose', help='Display the info messages.')
    parser.add_argument('--warning', '-w', action='store_const', const='warning', dest='verbose', help='Only display the warning and error messages.')
    parser.add_argument('--error', '-e', action='store_const', const='error', dest='verbose', help='Only display the error messages.')
    parser.add_argument('--quiet', '-q', action='store_const', const='quiet', dest='verbose', help='Quiet level of verbosity only displaying the critical error messages.')
    parser.add_argument('--version', '-V', action='store_true', default=False, help='Show the version of 4i.')
    parser.add_argument('--prefix', help='Set the prefix path.')
    parser.add_argument('--resource_prefix', help='Set the resource prefix path.')

    subparsers = parser.add_subparsers(help='Sub-command help.')

    sp = subparsers.add_parser('build', help='Build a project xml file.', **common_options)
    sp.add_argument('project_xml', nargs='?', help='Project xml file.', default='project.xml')
    sp.set_defaults(_class=Build)

    sp = subparsers.add_parser('list', help='List the retrieved resources.', **common_options)
    sp.set_defaults(_class=List)
    
    sp = subparsers.add_parser('clean', help='Clean up the building directory.', **common_options)
    sp.set_defaults(_class=Clean)

    sp = subparsers.add_parser('clean_resources', help='Clean up the retrieved resources.', **common_options)
    sp.set_defaults(_class=CleanResources)

    sp = subparsers.add_parser('create', help='Create a new resource.', **common_options)
    sp.add_argument('name', help='Name of the resource to create.')
    sp.add_argument('branch', nargs='?', help='Branch of the resource to create.', default='master')
    sp.add_argument('resource', nargs='?', choices=RESOURCES, help='Type of the resource to create.', default='module')
    sp.set_defaults(_class=Create)
    
    sp = subparsers.add_parser('update', help='Update the retrieved resources.', **common_options)
    sp.add_argument('name', nargs='?', help='Name of the specific resource to update.')
    sp.add_argument('branch', nargs='?', help='Branch of the resource to update.')
    sp.add_argument('resource', nargs='?', choices=RESOURCES, help='Type of the resource to update.')
    sp.set_defaults(_class=Update)

    sp = subparsers.add_parser('retrieve', help='Retrieve resources.', **common_options)
    sp.add_argument('name', help='Name of the specific resource to retrieve.')
    sp.add_argument('branch', nargs='?', help='Branch of the resource to retrieve.', default='master')
    sp.add_argument('resource', nargs='?', choices=RESOURCES, help='Type of the resource to retrieve.', default='module')
    sp.set_defaults(_class=Retrieve)

    sp = subparsers.add_parser('bootstrap', help='Use the post-processing bootstrapping script.', **common_options)
    sp.add_argument('project', help='Name of the project.')
    sp.set_defaults(_class=Bootstrap)

    sp = subparsers.add_parser('run', help='Use the post-processing running script.', **common_options)
    sp.add_argument('project', help='Name of the project.')
    sp.add_argument('module', help='Name of the module.')
    sp.set_defaults(_class=Run)

    sp = subparsers.add_parser('command', help='Use the post-processing command script.', **common_options)
    sp.add_argument('project', help='Name of the project.')
    sp.add_argument('module', help='Name of the module.')
    sp.add_argument('command', nargs='+', help='The command line to execute.')
    sp.set_defaults(_class=Command)

    sp = subparsers.add_parser('test', help='Test modules.', **common_options)
    sp.add_argument('name', nargs='?', help='Name of the module to test.')
    sp.add_argument('branch', nargs='?', help='Branch of the module to test.', default='master')
    sp.add_argument('tests', nargs='*', help='Name(s) of the test(s).')
    sp.add_argument('--list', '-l', action='store_true', default=False, help='Display a list of the available tests.')
    sp.set_defaults(_class=Test)

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    args = parser.parse_args()

    if args.levels:
        print "Here's the verbose levels available:"
        for keys in LEVELS.keys():
            print "\t%s" % keys
        sys.exit()

    if args.output:
        logging.basicConfig(
            level=logging.DEBUG,
            format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
            filename=args.output, filemode='a'
            )
    else:
        logging.basicConfig(
            level=LEVELS.get(args.verbose, logging.NOTSET),
            format='%(name)-12s: %(levelname)-8s %(message)s'
        )

    logger.debug(args)

    if args.version:
        print VERSION
        sys.exit()

    os.environ['FORGEIT_PREFIX'] = args.prefix if args.prefix else \
                                   '/'.join(sys.argv[0].split('/')[:-2])
    os.environ['FORGEIT_RESOURCE_PREFIX'] = args.resource_prefix if args.resource_prefix else \
                                            "%s/.4geit" % os.environ['HOME']

    if 'func' not in args and '_class' not in args:
        parser.print_help()
        sys.exit()

    if 'func' in args:
        args.func(args)

    if '_class' in args:
        cmd = args._class(args)
        cmd()
